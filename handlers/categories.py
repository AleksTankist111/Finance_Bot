from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.decorators import safe_handler
from database.crud import add_category, get_categories, soft_delete_category

router = Router()


class CategoryState(StatesGroup):
    entering_name = State()
    deleting_by_id = State()


@router.message(lambda msg: msg.text == "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
@safe_handler
async def show_categories(message: types.Message):
    categories = get_categories()
    if not categories:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    text = "\n".join([f"- {c.name}" for c in categories])
    await message.answer(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{text}")


@router.message(lambda msg: msg.text == "‚ûïüìÅ –î–æ–±–∞–≤–∏—Ç—å –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
@safe_handler
async def add_category_handler(message: types.Message, state: FSMContext):
    await state.set_state(CategoryState.entering_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")


# TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É "–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
@router.message(CategoryState.entering_name)
@safe_handler
async def add_category_entering_name(message: types.Message, state: FSMContext):
    parts = message.text
    name = parts
    category = add_category(name)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()


# TODO: –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–≤–æ–¥ –∏–∑ –º–µ–Ω—é (–ø–æ —Ç–µ–∫—Å—Ç—É)
@router.message(lambda msg: msg.text.startswith("/delete_category"))
@safe_handler
async def delete_category_handler(message: types.Message):
    name = message.text.split(maxsplit=1)[1]
    if soft_delete_category(name):
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è.")
    else:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
