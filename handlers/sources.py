from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.decorators import safe_handler
from database.crud import add_source, get_sources, soft_delete_source
from config import DEFAULT_CURRENCY

router = Router()

class SourceState(StatesGroup):
    entering_name = State()
    deleting_by_id = State()

@router.message(lambda msg: msg.text == "üíº –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
@safe_handler
async def show_sources(message: types.Message):
    sources = get_sources()
    if not sources:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        return
    text = "\n".join([f"{s.name} ({s.currency})" for s in sources])
    await message.answer(f"üíº –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n{text}")


@router.message(lambda msg: msg.text == "‚ûïüíº –î–æ–±–∞–≤–∏—Ç—å –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
@safe_handler
async def add_source_handler(message: types.Message, state: FSMContext):
    await state.set_state(SourceState.entering_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:")


# TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É "–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
@router.message(SourceState.entering_name)
@safe_handler
async def add_source_entering_name(message: types.Message, state: FSMContext):
    parts = message.text
    name = parts
    currency = DEFAULT_CURRENCY
    source = add_source(name, currency)
    await message.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source.name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()


# TODO: –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–≤–æ–¥ –∏–∑ –º–µ–Ω—é (–ø–æ —Ç–µ–∫—Å—Ç—É)
@router.message(lambda msg: msg.text.startswith("/delete_source"))
@safe_handler
async def delete_source_handler(message: types.Message):
    name = message.text.split(maxsplit=1)[1]
    if soft_delete_source(name):
        await message.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{name}' –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π.")
    else:
        await message.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
